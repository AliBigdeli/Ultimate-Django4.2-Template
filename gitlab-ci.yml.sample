stages: 
  - test
  - deploy 

# 1 - Make sure you can connect to your server via your ssh-key without requiring password.
# 2 - On gitlab, go to your repository > settings > CI/CD > Variables
# 3 - Add a new variable SSH_PRIVATE_KEY. The value is your ssh private key (e.g content of ~/.ssh/id_rsa)
# 4 - add more variables  SSH_USERNAME,SSH_HOST,PROJECT_PATH


# testing stage
test:
  # defining the stage name
  stage: test

  # only on main
  only:
    refs:
    - main

  # defining the base image 
  image: python:3.10-slim-buster

  # defining the services which it depends on
  services:
    - name: postgres:alpine
      alias: db

  # scripts which needs to be run before main script
  before_script:
    - pip3 install -r requirements.txt
    - cd ./core
    - python manage.py migrate
    - python manage.py check

  # main script for testing django app
  script:
    - export DJANGO_SETTINGS_MODULE=core.settings
    - pytest .

  # variables for service and main image
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST_AUTH_METHOD: trust


# deploying stage
deploy_staging:

# defining the stage name
  stage: deploy
  
  # only on main
  only:
    refs:
    - main

  before_script:
    - apt-get update -qq
    - apt-get install -qq git
    # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    
  script:
    - | 
      ssh $SSH_USERNAME@$SSH_HOST 
      "cd $PROJECT_PATH  &&
      docker-compose stop && 
      git pull &&
      docker-compose restart &&
      exit"